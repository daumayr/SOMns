# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)
default_data_file: 'codespeed.data'
default_experiment: SOMns

reporting:
    # results can also be reported to a codespeed instance
    # see: https://github.com/tobami/codespeed
    codespeed:
        url: https://somns-speed.stefan-marr.de/result/add/json/

runs:
  min_iteration_time: 1

# definition of benchmark suites
benchmark_suites:

    savina-jit:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.ns Savina.%(benchmark)s 1 0 "
        max_invocation_time: 420
        invocations: 1
        warmup: 25
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "M.PingPong"
            - Counting:
                extra_args: 200000  # was 1000000
                codespeed_name: "M.Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "M.ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "M.ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "M.ThreadRing"
            - Chameneos:
                extra_args: "100:100000"  # "100:200000"
                codespeed_name: "M.Chameneos"
            - BigContention:
                extra_args: "2000:120"
                codespeed_name: "M.BigContention"

            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:1000:20" # "20:10000:50"
                codespeed_name: "C.Dictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:1500:10:1" # "20:8000:10:1"
                codespeed_name: "C.SortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:60" # "50:40:40:1000"
                codespeed_name: "C.ProdConBoundedBuffer"
            - Philosophers:
                extra_args: "20:5000"
                codespeed_name: "C.Philosophers"
            - SleepingBarber:
                extra_args: "2500:1000:1000:1000"
                codespeed_name: "C.SleepingBarber"
            - CigaretteSmokers:
                extra_args: "10000:200"
                codespeed_name: "C.CigaretteSmokers"
            - LogisticsMapSeries:
                extra_args: "25000:10:346"
                codespeed_name: "C.LogisticsMapSeries"
            - BankTransaction:
                extra_args: "1000:100000"
                codespeed_name: "C.BankTransaction"

            # Parallelism
            - RadixSort:
                extra_args: "50000:65536:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "P.RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "100000:10:500:100"
                codespeed_name: "P.UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:1000000:1:5" # "100:10000000:1:5"
                codespeed_name: "P.TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:20"
                codespeed_name: "P.AStarSearch"
            - NQueens:
                extra_args: "20:10:4"
                codespeed_name: "P.NQueens"

    savina-csp:
        description: CSP port of the savina benchmarks
        gauge_adapter: RebenchLog
        command: &CSP_CMD " core-lib/Benchmarks/Harness.ns SavinaCSP.%(benchmark)s 1 0"
        max_invocation_time: 500
        invocations: 1
        warmup: 30
        benchmarks:
            #- PingPong:
                #numMessages numThreads, numThreads is unused
            #    extra_args: "4000 2"
            #    codespeed_name: "CSP.PingPong"
            - ForkJoinThroughput:
                #numMessages numThreads
                extra_args: "6000 4"
                codespeed_name: "CSP.ForkJoinThroughput"
            #- Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
            #    extra_args: "500 4"
            #    codespeed_name: "CSP.Philosophers"

    mutex:
        description: various mutex based benchmarks
        gauge_adapter: RebenchLog
        command: &MUTEX_CMD " core-lib/Benchmarks/Harness.ns %(benchmark)s 1 0"
        max_invocation_time: 500
        invocations: 1
        warmup: 30
        benchmarks:
            - MutexSuite.ProducerConsumer:
                #buffersize numThreads, split threads equally into producers and consumers
                extra_args: "4000 4"
                codespeed_name: "Mutex.ProducerConsumer"
            - MutexSuite.Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
                extra_args: "500 4"
                codespeed_name: "Mutex.Philosophers"
            - Lee:
                extra_args: "4 4"
                codespeed_name: "Mutex.Lee"
            - Vacation:
                extra_args: "7 4"
                codespeed_name: "Mutex.Vacation"

    stm:
        description: various mutex based benchmarks
        gauge_adapter: RebenchLog
        command: &STM_CMD " core-lib/Benchmarks/Harness.ns %(benchmark)s 1 0"
        max_invocation_time: 500
        invocations: 1
        warmup: 30
        benchmarks:
            - STMSuite.Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
                extra_args: "500 4"
                codespeed_name: "STM.Philosophers"
            - LeeSTM:
                extra_args: "4 4"
                codespeed_name: "STM.LeeSTM"
            - VacationSTM:
                extra_args: "7 4"
                codespeed_name: "STM.VacationSTM"

# VMs have a name and are specified by a path and the binary to be executed
executors:
    SOMns-graal:
        path: .
        executable: fast
        args: "-t1 -mt "

    # without restricting the number of actor threads
    SOMns-graal-tn:
        path: .
        executable: fast
        args: "-mt "

    # with actor tracing
    SOMns-graal-at:
        path: .
        executable: fast
        args: "-at -t1 -mt "
    SOMns-graal-at-tn:
        path: .
        executable: fast
        args: "-at -mt "

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOMns:
        description: All benchmarks on SOMns with Graal
        suites:
            - savina-csp
            - savina-jit
            - mutex
            - stm
        executions:
            - SOMns-graal
            - SOMns-graal-at

    SOMns-Bench:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-graal-tn:
                suites:
                  - savina-csp
                  - mutex
                  - stm
            - SOMns-graal:
                suites:
                  - savina-jit
            - SOMns-graal-at-tn:
                suites:
                  - savina-csp
                  - mutex
                  - stm
            - SOMns-graal-at:
                suites:
                  - savina-jit
